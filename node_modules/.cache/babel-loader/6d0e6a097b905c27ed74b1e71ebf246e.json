{"ast":null,"code":"var _jsxFileName = \"/home/rails/Desktop/parking_app/src/Context/DataContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contextDefaultValues = {\n  parkingSlots: [],\n  userInput: '',\n  setUserInput: () => undefined,\n  open: false,\n  setOpen: () => undefined,\n  setForm: () => undefined,\n  price: 0,\n  time: 2,\n  setTime: () => undefined,\n  setPrice: () => undefined,\n  form: {\n    registration: \"\",\n    time: \"\"\n  },\n  handleSubmit: () => {},\n  handleSubmit2: () => {}\n};\nconst DataContext = /*#__PURE__*/createContext(contextDefaultValues);\nexport const DataProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let navigate = useNavigate();\n  const [userInput, setUserInput] = useState(\"\");\n  const [form, setForm] = useState({\n    registration: \"\",\n    time: \"\"\n  });\n  const [parkingSlots, setParkingSlots] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [price, setPrice] = useState(20);\n  const [time, setTime] = useState(2);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let data = [];\n\n    for (let i = 1; i <= Number(userInput); i++) {\n      data.push({\n        id: i,\n        isAlloted: false\n      });\n    }\n\n    navigate(\"/layout\");\n    setParkingSlots(data);\n    console.log(data);\n  };\n\n  const handleSubmit2 = e => {\n    e.preventDefault();\n    const nums = new Set();\n\n    while (nums.size !== parkingSlots.length) {\n      nums.add(Math.floor(Math.random() * parkingSlots.length) + 1);\n    }\n\n    const randomArr = [...nums];\n    const filterArr = randomArr.filter(a => a === nums);\n    console.log(filterArr);\n    let randomNum = parkingSlots[Math.floor(Math.random() * parkingSlots.length)];\n    const slotBooked = parkingSlots.map(item => {\n      if (item === randomNum) {\n        if (item.isAlloted !== true) {\n          return { ...item,\n            isAlloted: true,\n            registration: form.registration,\n            time: form.time\n          };\n        } else {\n          const notify = () => toast(\"Parking is full!\");\n\n          notify();\n          return { ...item\n          };\n        }\n      } else {\n        return item;\n      }\n    });\n    console.log(slotBooked);\n    setParkingSlots(slotBooked);\n    setForm({\n      registration: \"\",\n      time: \"\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      userInput,\n      handleSubmit,\n      parkingSlots,\n      open,\n      price,\n      form,\n      handleSubmit2,\n      setUserInput,\n      setOpen,\n      setForm,\n      setPrice,\n      time,\n      setTime\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n};\n\n_s(DataProvider, \"/36J7AX7ufgkiBVDs7gQJ7VJlko=\", false, function () {\n  return [useNavigate];\n});\n\n_c = DataProvider;\nexport default DataContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useState","useNavigate","toast","contextDefaultValues","parkingSlots","userInput","setUserInput","undefined","open","setOpen","setForm","price","time","setTime","setPrice","form","registration","handleSubmit","handleSubmit2","DataContext","DataProvider","children","navigate","setParkingSlots","e","preventDefault","data","i","Number","push","id","isAlloted","console","log","nums","Set","size","length","add","Math","floor","random","randomArr","filterArr","filter","a","randomNum","slotBooked","map","item","notify"],"sources":["/home/rails/Desktop/parking_app/src/Context/DataContext.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {createContext} from 'react'\nimport { ParkingContextState } from './types'\nimport {useState} from 'react'\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nconst contextDefaultValues : ParkingContextState = {\n    parkingSlots: [],\n    userInput: '',\n    setUserInput: () => undefined,\n    open: false,\n    setOpen : () => undefined,\n    setForm : () => undefined,\n    price: 0,\n    time : 2,\n    setTime : () => undefined,\n    setPrice : () => undefined,\n    form: {\n        registration: \"\",\n        time: \"\"\n    },\n    handleSubmit: () => {},\n    handleSubmit2: () => {}\n\n} \n\ninterface Props {\n    children?: ReactNode\n}\n\nconst DataContext = createContext<ParkingContextState >(contextDefaultValues)\n\n\nexport const DataProvider = ({children} :Props) => {\n\n    let navigate = useNavigate();\n    const [userInput, setUserInput] = useState<string>(\"\");\n    const [form, setForm] = useState<{ registration: string; time: string }>({\n      registration: \"\",\n      time: \"\",\n    });\n    const [parkingSlots, setParkingSlots] = useState<any>([]);\n    const [open , setOpen] = useState<boolean>(false)\n    const [price , setPrice ] = useState<number>(20)\n    const [time , setTime] = useState<number>(2)\n  \n  \n  \n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      let data = [];\n      for (let i = 1; i <= Number(userInput); i++) {\n        data.push({ id: i, isAlloted: false });\n      }\n      navigate(\"/layout\" );\n      setParkingSlots(data);\n      console.log(data);\n    };\n  \n   \n    const handleSubmit2 = (e: React.FormEvent) => {\n      e.preventDefault();\n     \n      const nums = new Set();\n       while (nums.size !== parkingSlots.length) {\n       nums.add(Math.floor(Math.random() * parkingSlots.length ) + 1);\n     }\n\n     const randomArr = [...nums]\n     const filterArr = randomArr.filter(a => a === nums)\n     console.log(filterArr)\n\n\n     let randomNum = parkingSlots[Math.floor(Math.random() * parkingSlots.length)];\n      const slotBooked = parkingSlots.map((item: any) => {\n        if (item === randomNum) {\n          if (item.isAlloted !== true) {\n            return {\n              ...item,\n              isAlloted: true,\n              registration: form.registration,\n              time: form.time\n            };\n          } else{\n            const notify = () => toast(\"Parking is full!\");\n            notify();\n            return { ...item};\n          }\n        } else {\n          return item;\n        }\n      });\n\n      console.log(slotBooked)\n      setParkingSlots(slotBooked);\n      setForm({ registration: \"\", time: \"\" });\n    };\n  \n\n\n\n     return(\n         <DataContext.Provider value = {{\n          userInput,  handleSubmit , parkingSlots, open  , price , form , handleSubmit2, setUserInput,\n         setOpen, setForm, setPrice , time , setTime\n         }}>\n             {children}\n\n         </DataContext.Provider>\n     ) \n }\n export default DataContext"],"mappings":"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"},"metadata":{},"sourceType":"module"}