[{"/home/rails/Desktop/parking_app/src/index.tsx":"1","/home/rails/Desktop/parking_app/src/App.tsx":"2","/home/rails/Desktop/parking_app/src/Components/Header.tsx":"3","/home/rails/Desktop/parking_app/src/Components/SpaceInput.tsx":"4","/home/rails/Desktop/parking_app/src/Components/Layout.tsx":"5","/home/rails/Desktop/parking_app/src/Components/ModalPage.tsx":"6","/home/rails/Desktop/parking_app/src/Context/DataContext.tsx":"7"},{"size":360,"mtime":1654684158000,"results":"8","hashOfConfig":"9"},{"size":844,"mtime":1655213046885,"results":"10","hashOfConfig":"9"},{"size":355,"mtime":1654843697256,"results":"11","hashOfConfig":"9"},{"size":1047,"mtime":1655191365116,"results":"12","hashOfConfig":"9"},{"size":3003,"mtime":1655213049885,"results":"13","hashOfConfig":"9"},{"size":2373,"mtime":1655204058147,"results":"14","hashOfConfig":"9"},{"size":3128,"mtime":1655268352623,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1mx51sh",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rails/Desktop/parking_app/src/index.tsx",[],[],[],"/home/rails/Desktop/parking_app/src/App.tsx",[],[],"/home/rails/Desktop/parking_app/src/Components/Header.tsx",[],[],"/home/rails/Desktop/parking_app/src/Components/SpaceInput.tsx",[],[],"/home/rails/Desktop/parking_app/src/Components/Layout.tsx",[],[],"/home/rails/Desktop/parking_app/src/Components/ModalPage.tsx",["40"],[],"import React from 'react'\nimport { Button , Modal,Typography, Box, Grid} from '@material-ui/core';\nimport { useParams , useNavigate } from 'react-router-dom';\nimport {useContext } from \"react\"\nimport DataContext from '../Context/DataContext';\n\n\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n  };\n\n\n\nconst ModalPage = () => {\n  const {open, price, parkingSlots, time, value, setValue } = useContext(DataContext)\nlet {slotID} = useParams()\nconsole.log(slotID)\nlet navigate = useNavigate()\n\n\nconst handleBack = () => {\n        navigate('/layout')\n}\nconst handlePayment = async (slotID: string | undefined) => {\n    const latestArr = [...parkingSlots]\n   const newArray = latestArr.filter((x : any) => x.id == slotID ? delete x[\"time\"] && delete x[\"registration\"] : null )\n   const response = await fetch('https://httpstat.us/200', {\n    method : \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body : JSON.stringify(newArray)\n  })\n   \n  let data = await response.json()\n   if (response.status === 200){\n     if(newArray.length > 0){\n      let newData = newArray[0].isAlloted = false;\n      console.log(\"new data\",newData)\n     }\n     console.log(data)\n    \n   }\n   setValue(value -1)\n   navigate('/layout')\n}\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h4\"> Calculate Price</Typography>\n          <Typography id = \"deregister-time-spent\" variant=\"h6\">Total time spent :  {time} hrs</Typography>\n          <Typography id = \"deregister-charge\" variant=\"h6\">Total Price : $ {price}</Typography>\n         <hr/>\n         <Grid>\n             <Button id = \"deregister-back-button\" variant=\"contained\" color=\"secondary\" onClick = {handleBack}>Back </Button>\n             <Button id = \"deregister-payment-button\" style = {{marginLeft : \"10px\"}} variant=\"contained\" color=\"secondary\" onClick = {() => handlePayment(slotID)}>Payment taken</Button>\n         </Grid>\n        </Box>\n      </Modal>\n    </div>\n  )\n}\n\nexport default ModalPage\n\n\n",[],"/home/rails/Desktop/parking_app/src/Context/DataContext.tsx",[],[],{"ruleId":"41","severity":1,"message":"42","line":35,"column":56,"nodeType":"43","messageId":"44","endLine":35,"endColumn":58},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]